var fs = require('fs'), data = {}
module.exports = data
data.orders = JSON.parse(fs.readFileSync('orders.json'))
data.fees = JSON.parse(fs.readFileSync('fees.json'))

// flatten and fix poor fee structure
data.item_type = {}
data.fees.forEach((fee, i)=>{
    fee.id = i
    data.item_type[fee.order_item_type] = fee
    fee.fees.forEach(subfee =>{
        if(subfee.type == 'flat') fee.fee = parseFloat(subfee.amount)
        else if(subfee.type == 'per-page') fee.fee_page = parseFloat(subfee.amount)
        else throw('fee type '+ subfee.type +' not implemented')
    })
    fee.fund = fee.distributions.map(v => parseFloat(v.amount))
    fee.fund_name = fee.distributions.map(v => v.name)
})

data.item_fee = item =>{
    var fee = data.item_type[item.type]
    if(!fee) throw('unrecognized order item type '+ item.type)
    return fee.fee + ((item.pages && fee.fee_page) ? fee.fee_page * item.pages : 0)
}

data.order_funds = order =>{
    var total = order.order_items.map(data.item_fee).reduce((x,y)=>x+y, 0, 0),
        item_types = new Array(data.fees.length).fill(0), funds = [], fund_total = 0
    order.order_items.forEach(item => item_types[data.item_type[item.type].id] += 1) 
    item_types.forEach((v,i) =>{
        if(!v) return
        var fee = data.fees[i]
        fee.fund.forEach((amount, i) =>{
            funds.push({ name: fee.fund_name[i], amount: amount * v })
            fund_total += amount * v
        })
    })
    funds.push({ name: 'Other', amount: total - fund_total })
    return funds
}
